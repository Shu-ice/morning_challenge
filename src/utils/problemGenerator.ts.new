import { Problem } from '../types';
import { DifficultyRank, difficultyToJapanese, japaneseToDifficulty } from '../types/difficulty';

// シード付き乱数生成関数
const seededRandom = (seed: number) => {
  const x = Math.sin(seed) * 10000;
  return x - Math.floor(x);
};

// 日付からシード値を生成
const getDateSeed = () => {
  const now = new Date();
  const dateString = `${now.getFullYear()}${now.getMonth()}${now.getDate()}`;
  let seed = 0;
  for (let i = 0; i < dateString.length; i++) {
    seed += dateString.charCodeAt(i);
  }
  return seed;
};

// 整数の乱数を生成
const getRandomInt = (min: number, max: number, seed: number): number => {
  const random = seededRandom(seed);
  return Math.floor(random * (max - min + 1)) + min;
};

// 選択肢を生成
const generateOptions = (answer: number, difficulty: DifficultyRank, seed: number): number[] => {
  const options = [answer];
  
  // 難易度に応じた選択肢の範囲を設定
  let range = 5;
  if (difficulty === 'intermediate') range = 10;
  if (difficulty === 'advanced') range = 20;
  if (difficulty === 'expert') range = 50;
  
  // 3つの誤った選択肢を追加
  for (let i = 0; i < 3; i++) {
    let option;
    do {
      // 答えから近い範囲で選択肢を生成
      const offset = getRandomInt(-range, range, seed + i * 100);
      option = answer + offset;
      // 0以下や同じ選択肢は避ける
      if (option <= 0) option = getRandomInt(1, range, seed + i * 200);
    } while (options.includes(option));
    
    options.push(option);
  }
  
  // 選択肢をシャッフル
  for (let i = options.length - 1; i > 0; i--) {
    const j = Math.floor(seededRandom(seed + i) * (i + 1));
    [options[i], options[j]] = [options[j], options[i]];
  }
  
  return options;
};

// 難易度に応じた問題を生成
const generateProblemsByDifficulty = (difficulty: DifficultyRank, count: number = 10): Problem[] => {
  const problems: Problem[] = [];
  const baseSeed = getDateSeed();
  
  for (let i = 0; i < count; i++) {
    const seed = baseSeed + i * 1000;
    let num1, num2, answer, question;
    
    switch (difficulty) {
      case 'beginner':
        // 初級: 1-10の足し算・引き算
        num1 = getRandomInt(1, 10, seed);
        num2 = getRandomInt(1, 10, seed + 1);
        if (getRandomInt(0, 1, seed + 2) === 0) {
          // 足し算
          answer = num1 + num2;
          question = `${num1} + ${num2} = ?`;
        } else {
          // 引き算 (答えが正になるように)
          [num1, num2] = num1 > num2 ? [num1, num2] : [num2, num1];
          answer = num1 - num2;
          question = `${num1} - ${num2} = ?`;
        }
        break;
        
      case 'intermediate':
        // 中級: 1-20の四則演算
        num1 = getRandomInt(1, 20, seed);
        num2 = getRandomInt(1, 20, seed + 1);
        const op = getRandomInt(0, 3, seed + 2);
        
        if (op === 0) {
          // 足し算
          answer = num1 + num2;
          question = `${num1} + ${num2} = ?`;
        } else if (op === 1) {
          // 引き算 (答えが正になるように)
          [num1, num2] = num1 > num2 ? [num1, num2] : [num2, num1];
          answer = num1 - num2;
          question = `${num1} - ${num2} = ?`;
        } else if (op === 2) {
          // 掛け算
          answer = num1 * num2;
          question = `${num1} × ${num2} = ?`;
        } else {
          // 割り算 (割り切れるように)
          num2 = getRandomInt(1, 10, seed + 1);
          num1 = num2 * getRandomInt(1, 10, seed + 3);
          answer = num1 / num2;
          question = `${num1} ÷ ${num2} = ?`;
        }
        break;
        
      case 'advanced':
        // 上級: 10-50の四則演算、2段階の計算
        num1 = getRandomInt(10, 50, seed);
        num2 = getRandomInt(10, 50, seed + 1);
        let num3 = getRandomInt(1, 20, seed + 2);
        const op1 = getRandomInt(0, 3, seed + 3);
        const op2 = getRandomInt(0, 3, seed + 4);
        
        if (getRandomInt(0, 1, seed + 5) === 0) {
          // 単純な四則演算
          if (op1 === 0) {
            answer = num1 + num2;
            question = `${num1} + ${num2} = ?`;
          } else if (op1 === 1) {
            [num1, num2] = num1 > num2 ? [num1, num2] : [num2, num1];
            answer = num1 - num2;
            question = `${num1} - ${num2} = ?`;
          } else if (op1 === 2) {
            answer = num1 * num2;
            question = `${num1} × ${num2} = ?`;
          } else {
            // 割り算 (端数がでないように)
            num2 = getRandomInt(1, 10, seed + 1);
            num1 = num2 * getRandomInt(1, 10, seed + 6);
            answer = num1 / num2;
            question = `${num1} ÷ ${num2} = ?`;
          }
        } else {
          // 2段階の計算
          let mid;
          if (op1 === 0) {
            mid = num1 + num2;
            if (op2 === 0) {
              answer = mid + num3;
              question = `${num1} + ${num2} + ${num3} = ?`;
            } else if (op2 === 1) {
              answer = mid - num3;
              question = `${num1} + ${num2} - ${num3} = ?`;
            } else if (op2 === 2) {
              answer = mid * num3;
              question = `(${num1} + ${num2}) × ${num3} = ?`;
            } else {
              // 割り算の場合は割り切れる数字にする
              const divisor = getRandomInt(1, 5, seed + 7);
              // num3 = divisor; // ここを修正
              let updatedNum3 = divisor; // constからletに変更
              mid = divisor * getRandomInt(1, 10, seed + 8);
              num1 = mid - num2;
              answer = mid / divisor;
              question = `(${num1} + ${num2}) ÷ ${divisor} = ?`;
            }
          } else if (op1 === 1) {
            [num1, num2] = num1 > num2 ? [num1, num2] : [num2, num1];
            mid = num1 - num2;
            if (op2 === 0) {
              answer = mid + num3;
              question = `${num1} - ${num2} + ${num3} = ?`;
            } else if (op2 === 1) {
              if (mid > num3) {
                answer = mid - num3;
                question = `${num1} - ${num2} - ${num3} = ?`;
              } else {
                answer = num3 - mid;
                question = `${num3} - (${num1} - ${num2}) = ?`;
              }
            } else if (op2 === 2) {
              answer = mid * num3;
              question = `(${num1} - ${num2}) × ${num3} = ?`;
            } else {
              // 割り算の場合は割り切れる数字にする
              const divisor = getRandomInt(1, 5, seed + 7);
              // num3 = divisor; // ここを修正
              let updatedNum3 = divisor; // constからletに変更
              mid = divisor * getRandomInt(1, 10, seed + 8);
              num1 = mid + num2;
              answer = mid / divisor;
              question = `(${num1} - ${num2}) ÷ ${divisor} = ?`;
            }
          }
        }
        break;
        
      case 'expert':
        // 超級: 複雑な計算、方程式的な問題
        if (getRandomInt(0, 2, seed) === 0) {
          // 複雑な四則演算
          num1 = getRandomInt(10, 100, seed + 1);
          num2 = getRandomInt(10, 100, seed + 2);
          let num3 = getRandomInt(1, 50, seed + 3);
          let num4 = getRandomInt(1, 50, seed + 4);
          
          const ops = ['+', '-', '×', '÷'];
          const op1 = ops[getRandomInt(0, 1, seed + 5)]; // +, -
          const op2 = ops[getRandomInt(0, 1, seed + 6)]; // +, -
          const op3 = ops[getRandomInt(2, 3, seed + 7)]; // ×, ÷
          
          if (op3 === '×') {
            if (op1 === '+' && op2 === '+') {
              answer = num1 + num2 + num3 * num4;
              question = `${num1} + ${num2} + ${num3} × ${num4} = ?`;
            } else if (op1 === '+' && op2 === '-') {
              answer = num1 + num2 - num3 * num4;
              question = `${num1} + ${num2} - ${num3} × ${num4} = ?`;
            } else if (op1 === '-' && op2 === '+') {
              answer = num1 - num2 + num3 * num4;
              question = `${num1} - ${num2} + ${num3} × ${num4} = ?`;
            } else {
              answer = num1 - num2 - num3 * num4;
              question = `${num1} - ${num2} - ${num3} × ${num4} = ?`;
            }
          } else {
            // 割り算の場合、端数が出ないようにする
            let updatedNum4 = getRandomInt(1, 10, seed + 4); // constからletに変更
            let updatedNum3 = updatedNum4 * getRandomInt(1, 5, seed + 8); // constからletに変更
            
            if (op1 === '+' && op2 === '+') {
              answer = num1 + num2 + updatedNum3 / updatedNum4;
              question = `${num1} + ${num2} + ${updatedNum3} ÷ ${updatedNum4} = ?`;
            } else if (op1 === '+' && op2 === '-') {
              answer = num1 + num2 - updatedNum3 / updatedNum4;
              question = `${num1} + ${num2} - ${updatedNum3} ÷ ${updatedNum4} = ?`;
            } else if (op1 === '-' && op2 === '+') {
              answer = num1 - num2 + updatedNum3 / updatedNum4;
              question = `${num1} - ${num2} + ${updatedNum3} ÷ ${updatedNum4} = ?`;
            } else {
              answer = num1 - num2 - updatedNum3 / updatedNum4;
              question = `${num1} - ${num2} - ${updatedNum3} ÷ ${updatedNum4} = ?`;
            }
          }
        } else {
          // 方程式的な問題（□を使う）
          const x = getRandomInt(1, 30, seed);
          num1 = getRandomInt(1, 50, seed + 1);
          num2 = getRandomInt(1, 50, seed + 2);
          
          const type = getRandomInt(0, 3, seed + 3);
          
          if (type === 0) {
            // □ + num1 = num2
            question = `□ + ${num1} = ${num1 + x} となる□は?`;
            answer = x;
          } else if (type === 1) {
            // num1 - □ = num2
            question = `${num1 + x} - □ = ${num1} となる□は?`;
            answer = x;
          } else if (type === 2) {
            // □ × num1 = num2
            num1 = getRandomInt(2, 10, seed + 1);
            question = `□ × ${num1} = ${x * num1} となる□は?`;
            answer = x;
          } else {
            // num1 ÷ □ = num2
            num1 = getRandomInt(2, 5, seed + 1);
            num2 = x * num1;
            question = `${num2} ÷ □ = ${num1} となる□は?`;
            answer = x;
          }
        }
        break;
    }
    
    if (answer !== undefined && question !== undefined) {
      // 選択肢を生成
      const options = generateOptions(answer, difficulty, seed + 500);
      
      problems.push({
        question,
        answer,
        options
      });
    }
  }
  
  return problems;
};

export const generateProblems = (difficulty: DifficultyRank, count?: number): Problem[] => {
  return generateProblemsByDifficulty(difficulty, count || 10);
};

export { difficultyToJapanese, japaneseToDifficulty }; 