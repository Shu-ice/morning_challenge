/**
 * @jest-environment jsdom
 */
import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';
import { render, screen, fireEvent, act } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { TopNav } from '../TopNav';
import { AuthProvider } from '../../contexts/AuthContext';

// Mock the AuthContext
const mockUser = {
  _id: '1',
  username: 'testuser',
  email: 'test@example.com',
  isLoggedIn: true,
  isAdmin: false
};

const mockLogout = vi.fn();

vi.mock('../../contexts/AuthContext', () => ({
  AuthProvider: ({ children }: { children: React.ReactNode }) => children,
  useAuth: () => ({
    user: mockUser,
    logout: mockLogout,
    loading: false
  })
}));

// Helper function to set viewport size
const setViewportSize = (width: number, height: number) => {
  Object.defineProperty(window, 'innerWidth', {
    writable: true,
    configurable: true,
    value: width,
  });
  Object.defineProperty(window, 'innerHeight', {
    writable: true,
    configurable: true,
    value: height,
  });
  
  // Trigger resize event
  act(() => {
    window.dispatchEvent(new Event('resize'));
  });
};

// Helper function to render TopNav with providers
const renderTopNav = () => {
  return render(\n    <BrowserRouter>\n      <AuthProvider>\n        <TopNav />\n      </AuthProvider>\n    </BrowserRouter>\n  );\n};\n\ndescribe('TopNav Mobile Responsive Behavior', () => {\n  beforeEach(() => {\n    // Reset mocks\n    vi.clearAllMocks();\n    \n    // Set default desktop viewport\n    setViewportSize(1024, 768);\n  });\n  \n  afterEach(() => {\n    // Clean up any open modals or side effects\n    document.body.innerHTML = '';\n  });\n\n  describe('Desktop Viewport (≥640px)', () => {\n    it('should show navigation links and hide burger menu on desktop', () => {\n      setViewportSize(1024, 768);\n      renderTopNav();\n      \n      // Desktop navigation links should be visible\n      expect(screen.getByRole('link', { name: /ホーム/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /ランキング/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /履歴/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /マイページ/i })).toBeInTheDocument();\n      \n      // Burger menu button should not be visible (hidden by CSS)\n      const burgerButton = screen.queryByLabelText(/メニューを開く/i);\n      if (burgerButton) {\n        expect(burgerButton).toHaveClass('sm:hidden');\n      }\n    });\n\n    it('should show username and logout button on desktop', () => {\n      setViewportSize(1024, 768);\n      renderTopNav();\n      \n      expect(screen.getByText('testuser')).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /ログアウト/i })).toBeInTheDocument();\n    });\n  });\n\n  describe('Mobile Viewport (<640px)', () => {\n    it('should hide navigation links and show burger menu on mobile (375px)', () => {\n      setViewportSize(375, 667); // iPhone SE dimensions\n      renderTopNav();\n      \n      // Mobile burger button should be present\n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      expect(burgerButton).toBeInTheDocument();\n      \n      // Desktop navigation links should be hidden by CSS classes\n      const desktopNav = screen.getByText('ホーム').closest('.hidden.sm\\\\:flex, .sm\\\\:flex');\n      if (desktopNav) {\n        expect(desktopNav).toHaveClass('hidden', 'sm:flex');\n      }\n    });\n\n    it('should show mobile username but compact layout', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      // Username should still be visible but in mobile format\n      expect(screen.getByText('testuser')).toBeInTheDocument();\n      \n      // Check burger menu button is present\n      expect(screen.getByLabelText(/メニューを開く/i)).toBeInTheDocument();\n    });\n\n    it('should open mobile drawer when burger menu is clicked', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Initially, mobile drawer should not be visible\n      expect(screen.queryByRole('link', { name: /🏠 ホーム/i })).not.toBeInTheDocument();\n      \n      // Click burger menu\n      act(() => {\n        fireEvent.click(burgerButton);\n      });\n      \n      // Mobile navigation links should now be visible\n      expect(screen.getByRole('link', { name: /🏠 ホーム/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /🏆 ランキング/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /📊 履歴/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /👤 マイページ/i })).toBeInTheDocument();\n    });\n\n    it('should close mobile drawer when backdrop is clicked', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Open mobile menu\n      act(() => {\n        fireEvent.click(burgerButton);\n      });\n      \n      // Verify menu is open\n      expect(screen.getByRole('link', { name: /🏠 ホーム/i })).toBeInTheDocument();\n      \n      // Find and click backdrop\n      const backdrop = document.querySelector('.fixed.inset-0.bg-black');\n      expect(backdrop).toBeInTheDocument();\n      \n      act(() => {\n        fireEvent.click(backdrop as Element);\n      });\n      \n      // Menu should be closed (links should not be visible)\n      expect(screen.queryByRole('link', { name: /🏠 ホーム/i })).not.toBeInTheDocument();\n    });\n\n    it('should close mobile drawer when escape key is pressed', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Open mobile menu\n      act(() => {\n        fireEvent.click(burgerButton);\n      });\n      \n      // Verify menu is open\n      expect(screen.getByRole('link', { name: /🏠 ホーム/i })).toBeInTheDocument();\n      \n      // Press escape key\n      act(() => {\n        fireEvent.keyDown(document, { key: 'Escape', code: 'Escape' });\n      });\n      \n      // Menu should be closed\n      expect(screen.queryByRole('link', { name: /🏠 ホーム/i })).not.toBeInTheDocument();\n    });\n\n    it('should handle logout from mobile menu', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Open mobile menu\n      act(() => {\n        fireEvent.click(burgerButton);\n      });\n      \n      // Find and click logout button in mobile menu\n      const logoutButton = screen.getByRole('button', { name: /🚪 ログアウト/i });\n      expect(logoutButton).toBeInTheDocument();\n      \n      act(() => {\n        fireEvent.click(logoutButton);\n      });\n      \n      // Verify logout was called\n      expect(mockLogout).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Tablet Viewport (640px - edge case)', () => {\n    it('should show desktop layout at 640px breakpoint', () => {\n      setViewportSize(640, 768);\n      renderTopNav();\n      \n      // At exactly 640px, should show desktop layout\n      expect(screen.getByRole('link', { name: /ホーム/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /ランキング/i })).toBeInTheDocument();\n    });\n\n    it('should show mobile layout just below 640px', () => {\n      setViewportSize(639, 768);\n      renderTopNav();\n      \n      // Just below 640px should show mobile layout\n      expect(screen.getByLabelText(/メニューを開く/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Admin User Mobile Behavior', () => {\n    beforeEach(() => {\n      // Mock admin user\n      vi.mocked(vi.importActual('../../contexts/AuthContext')).useAuth = () => ({\n        user: { ...mockUser, isAdmin: true },\n        logout: mockLogout,\n        loading: false\n      });\n    });\n\n    it('should show admin menu items in mobile drawer for admin users', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Open mobile menu\n      act(() => {\n        fireEvent.click(burgerButton);\n      });\n      \n      // Should show admin section\n      expect(screen.getByText(/管理者メニュー/i)).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /📊 ダッシュボード/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /⚡ 問題生成/i })).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA attributes for mobile menu', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Check initial ARIA state\n      expect(burgerButton).toHaveAttribute('aria-expanded', 'false');\n      expect(burgerButton).toHaveAttribute('aria-label', 'メニューを開く');\n      \n      // Open menu\n      act(() => {\n        fireEvent.click(burgerButton);\n      });\n      \n      // Check expanded state\n      expect(burgerButton).toHaveAttribute('aria-expanded', 'true');\n    });\n\n    it('should support keyboard navigation in mobile menu', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Open menu with Enter key\n      act(() => {\n        fireEvent.keyDown(burgerButton, { key: 'Enter' });\n        fireEvent.click(burgerButton); // Simulate actual click since keyDown alone won't trigger onClick\n      });\n      \n      // Should be able to tab through menu items\n      const homeLink = screen.getByRole('link', { name: /🏠 ホーム/i });\n      expect(homeLink).toBeInTheDocument();\n      \n      // Focus should be manageable\n      act(() => {\n        homeLink.focus();\n      });\n      \n      expect(document.activeElement).toBe(homeLink);\n    });\n  });\n\n  describe('Performance and Animations', () => {\n    it('should handle rapid menu open/close without issues', () => {\n      setViewportSize(375, 667);\n      renderTopNav();\n      \n      const burgerButton = screen.getByLabelText(/メニューを開く/i);\n      \n      // Rapidly open and close menu multiple times\n      for (let i = 0; i < 5; i++) {\n        act(() => {\n          fireEvent.click(burgerButton);\n        });\n        act(() => {\n          fireEvent.click(burgerButton);\n        });\n      }\n      \n      // Should still be functional\n      expect(burgerButton).toBeInTheDocument();\n      expect(screen.queryByRole('link', { name: /🏠 ホーム/i })).not.toBeInTheDocument();\n    });\n  });\n});\n\n// Additional test for CSS class verification\ndescribe('TopNav CSS Classes', () => {\n  it('should apply correct responsive classes', () => {\n    renderTopNav();\n    \n    // Find desktop navigation container\n    const desktopNav = screen.getByText('ホーム').closest('div');\n    expect(desktopNav).toHaveClass('hidden', 'sm:flex');\n    \n    // Find mobile menu button container\n    const mobileButtonContainer = screen.getByLabelText(/メニューを開く/i).closest('div');\n    expect(mobileButtonContainer).toHaveClass('sm:hidden');\n  });\n});