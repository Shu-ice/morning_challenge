import User from '../models/User.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '30d';

// JWT „Éà„Éº„ÇØ„É≥ÁîüÊàê„Éò„É´„Éë„ÉºÈñ¢Êï∞
const generateToken = (userId) => {
  return jwt.sign({ userId }, JWT_SECRET, {
    expiresIn: JWT_EXPIRES_IN,
  });
};

// @desc    Register a new user
// @route   POST /api/auth/register
// @access  Public
const registerUser = async (req, res, next) => {
  console.log('[authController] registerUser function started');
  const { username, email, password, grade, avatar } = req.body;

  try {
    // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    const userExists = await User.findOne({ email });
    if (userExists) {
      res.status(400); // Bad Request
      throw new Error('„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
    }

    // „É¶„Éº„Ç∂„ÉºÂêç„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    const usernameExists = await User.findOne({ username });
    if (usernameExists) {
      res.status(400);
      throw new Error('„Åì„ÅÆ„É¶„Éº„Ç∂„ÉºÂêç„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
    }

    // Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê („Éë„Çπ„ÉØ„Éº„Éâ„ÅØ pre-save „Éï„ÉÉ„ÇØ„Åß„Éè„ÉÉ„Ç∑„É•Âåñ„Åï„Çå„Çã)
    const user = await User.create({
      username,
      email,
      password, // Âπ≥Êñá„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÊ∏°„Åô
      grade,
      avatar,
    });

    if (user) {
      const token = generateToken(user._id);

      // „ÇØ„ÉÉ„Ç≠„Éº„Å´„Éà„Éº„ÇØ„É≥„ÇíË®≠ÂÆö (HttpOnly„Åß„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âêë‰∏ä)
      res.cookie('jwt', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV !== 'development', // Êú¨Áï™Áí∞Â¢É„Åß„ÅØ HTTPS „ÅÆ„Åø
        sameSite: 'strict', // CSRFÂØæÁ≠ñ
        maxAge: 30 * 24 * 60 * 60 * 1000, // 30Êó•
      });

      res.status(201).json({
        _id: user._id,
        username: user.username,
        email: user.email,
        grade: user.grade,
        avatar: user.avatar,
        isAdmin: user.isAdmin,
        token: token, // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅßÁä∂ÊÖãÁÆ°ÁêÜÁî®„Å´„Éà„Éº„ÇØ„É≥„ÇÇËøî„Åô
      });
    } else {
      res.status(400);
      throw new Error('ÁÑ°Âäπ„Å™„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„Åß„Åô');
    }
  } catch (error) {
    // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢„Å´Âá¶ÁêÜ„ÇíÂßîË≠≤
    next(error);
  }
};

// @desc    Authenticate user & get token
// @route   POST /api/auth/login
// @access  Public
const loginUser = async (req, res, next) => {
  const startTime = Date.now();
  console.log(`[${new Date(startTime).toISOString()}] [authController] loginUser function started`);
  const { email, password } = req.body;
  console.log(`[Login attempt] Email: ${email}, Password provided: ${password ? 'Yes' : 'No'}`);

  try {
    console.log(`[${new Date().toISOString()}] [authController] Searching for user by email: ${email}`);
    // üî• Á∑äÊÄ•‰øÆÊ≠£: „É¢„ÉÉ„ÇØÁí∞Â¢É„Åß„ÅÆfindOneÂá¶ÁêÜ
    const userQuery = User.findOne({ email });
    const user = await (userQuery.select ? userQuery.select('+password') : userQuery);
    const userSearchTime = Date.now();
    console.log(`[${new Date(userSearchTime).toISOString()}] [authController] User search completed. Duration: ${userSearchTime - startTime}ms. User found: ${user ? user.username : 'null'}`);
    console.log(`[Login user found] User: ${user ? user.username : 'null'}, Password in DB: ${user && user.password ? 'Exists' : 'Missing or null'}`);

    if (user) {
      console.log(`[${new Date().toISOString()}] [authController] Comparing password for user: ${user.username}`);
      console.log(`[Login user.password type] ${typeof user.password}, length: ${user.password ? user.password.length : 'N/A'}`);
      const isMatch = await user.matchPassword(password);
      const passwordMatchTime = Date.now();
      console.log(`[${new Date(passwordMatchTime).toISOString()}] [authController] Password comparison completed. Duration: ${passwordMatchTime - userSearchTime}ms. Is match: ${isMatch}`);
      console.log(`[Login password match result] Is match: ${isMatch}`);

      if (isMatch) {
        const token = generateToken(user._id);

        // „ÇØ„ÉÉ„Ç≠„Éº„Å´„Éà„Éº„ÇØ„É≥„ÇíË®≠ÂÆö
        res.cookie('jwt', token, {
          httpOnly: true,
          secure: process.env.NODE_ENV !== 'development',
          sameSite: 'strict',
          maxAge: 30 * 24 * 60 * 60 * 1000,
        });

        res.json({
          success: true,
          message: '„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åó„Åü„ÄÇ',
          user: {
            _id: user._id,
            username: user.username,
            email: user.email,
            grade: user.grade,
            avatar: user.avatar,
            isAdmin: user.isAdmin,
            isLoggedIn: true
          },
          token: token,
        });
        const endTime = Date.now();
        console.log(`[${new Date(endTime).toISOString()}] [authController] loginUser successful for ${email}. Total duration: ${endTime - startTime}ms`);
      } else {
        const endTime = Date.now();
        console.log(`[${new Date(endTime).toISOString()}] [authController] Login attempt failed for ${email}: Password mismatch. Total duration: ${endTime - startTime}ms`);
        console.log('[Login attempt failed] User not found or password mismatch.');
        res.status(401); // Unauthorized
        throw new Error('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÁÑ°Âäπ„Åß„Åô');
      }
    } else {
      const endTime = Date.now();
      console.log(`[${new Date(endTime).toISOString()}] [authController] Login attempt failed for ${email}: User not found. Total duration: ${endTime - startTime}ms`);
      console.log('[Login attempt failed] User not found or password mismatch.');
      res.status(401); // Unauthorized
      throw new Error('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÁÑ°Âäπ„Åß„Åô');
    }
  } catch (error) {
    const endTime = Date.now();
    console.error(`[${new Date(endTime).toISOString()}] [authController] loginUser error for ${email}. Total duration: ${endTime - startTime}ms. Error: ${error.message}`);
    next(error);
  }
};

// TODO: Add logoutUser controller

export {
  registerUser,
  loginUser
}; 